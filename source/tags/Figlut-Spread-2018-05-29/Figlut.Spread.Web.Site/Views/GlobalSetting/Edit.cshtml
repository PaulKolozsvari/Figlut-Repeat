@model Figlut.Spread.Web.Site.Models.GlobalSettingsModel

@using Figlut.Spread.Web.Site.Configuration;
@using Figlut.Spread.Web.Site.Extensions;

@{
    ViewBag.Title = SpreadWebApp.Instance.Settings.ApplicationName;
    ViewBag.PageTitle = "Edit Global Settings";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section featured {
}

<nav>
    <ul id="menu">
        <li>
            <img src="~/Images/Icons/red-laptop-icon32.png" style="float:right; margin-right:1%; margin-left:1%"/>
            <a href="" style="float:right">Global Settings</a>
        </li>
    </ul>
</nav>
<hr />

<div class="centerForm">
    <form id="EditGlobalSettingsForm">
        @Html.ValidationSummary("Edit Global Settings failed.")
        <fieldset>
            <legend>Edit Global Settings</legend>

            @*System Settings*@
            <div class="glogal-settings-category">Fdrop
                @Html.Raw("System Settings")
            </div>
            <br />
            <div class="field-label">
                @Html.Raw("Disable Screen Scaling For Mobile Devices")
            </div>
            <div class="drop-down-field">
                @Html.DropDownListFor(m => m.DisableScreenScalingForMobileDevices, new SelectList(
                    new[] 
                    { 
                        new { Value = "true", Text = "Yes" },
                        new { Value = "false", Text = "No" },
                    },
                    "Value",
                    "Text",
                    Model
                ), 
                new { @class = "drop-down-field" })
                @Html.ValidationMessageFor(m => m.DisableScreenScalingForMobileDevices, "Disable Screen ScalingFor Mobile Devices is required.")
            </div>
            <div class="field-label">
                @Html.Raw("Create Persistent Authentication Cookie")
            </div>
            <div class="drop-down-field">
                @Html.DropDownListFor(m => m.CreatePersistentAuthenticationCookie, new SelectList(
                    new[] 
                    { 
                        new { Value = "true", Text = "Yes" },
                        new { Value = "false", Text = "No" },
                    },
                    "Value",
                    "Text",
                    Model
                ), 
                new { @class = "drop-down-field" })
                @Html.ValidationMessageFor(m => m.CreatePersistentAuthenticationCookie, "Create Persistent Authentication Cookie is required.")
            </div>
            <div class="field-label">
                @Html.Raw("Log All HTTP Headers")
            </div>
            <div class="drop-down-field">
                @Html.DropDownListFor(m => m.LogAllHttpHeaders, new SelectList(
                    new[] 
                    { 
                        new { Value = "true", Text = "Yes" },
                        new { Value = "false", Text = "No" },
                    },
                    "Value",
                    "Text",
                    Model
                ), 
                new { @class = "drop-down-field" })
                @Html.ValidationMessageFor(m => m.LogAllHttpHeaders, "Log All HTTP Headers is required.")
            </div>
            <br />
            <hr />
            <br />
            @*SMS Settings*@
            <div class="glogal-settings-category">
                @Html.Raw("SMS Settings")
            </div>
            <br />
            <div class="field-label">
                @Html.Raw("Organization Identifier Indicator")
            </div>
            <div class="editor-field">
                @Html.EditorFor(m => m.OrganizationIdentifierIndicator)
                @Html.ValidationMessageFor(m => m.OrganizationIdentifierIndicator, "Organization Identifier Indicator is required")
            </div>
            <div class="field-label">
                @Html.Raw("Subscriber Name Indicator")
            </div>
            <div class="editor-field">
                @Html.EditorFor(m => m.SubscriberNameIndicator)
                @Html.ValidationMessageFor(m => m.SubscriberNameIndicator, "Subscriber Name Indicator is required")
            </div>
            <br />
            <hr />
            <br />
            @*Grid Settings*@
            <div class="glogal-settings-category">
                @Html.Raw("Grid Settings")
            </div>
            <br />
            <div class="field-label">
                @Html.Raw("Organizations Per Page To Display")
            </div>
            <div class="editor-field">
                @Html.EditorFor(m => m.OrganizationsPerPageToDisplay)
                @Html.ValidationMessageFor(m => m.OrganizationsPerPageToDisplay, "Organizations Per Page To Display is required.")
            </div>
            <div class="field-label">
                @Html.Raw("Users Per Page To Display")
            </div>
            <div class="editor-field">
                @Html.EditorFor(m => m.UsersPerPageToDisplay)
                @Html.ValidationMessageFor(m => m.UsersPerPageToDisplay, "Users Per Page To Display is required.")
            </div>

            <div class="field-label">
                @Html.Raw("Subscriptions Per Page To Display")
            </div>
            <div class="editor-field">
                @Html.EditorFor(m => m.SubscriptionsPerPageToDisplay)
                @Html.ValidationMessageFor(m => m.SubscriptionsPerPageToDisplay, "Subsriptions Per Page To Display is required.")
            </div>

           <div class="field-label">
                @Html.Raw("SMS Processors Per Page To Display")
            </div>
            <div class="editor-field">
                @Html.EditorFor(m => m.SmsProcessorsPerPageToDisplay)
                @Html.ValidationMessageFor(m => m.SmsProcessorsPerPageToDisplay, "SMS Processors Per Page To Display is required.")
            </div>

            <div class="field-label">
                @Html.Raw("SMS' Per Page To Display")
            </div>
            <div class="editor-field">
                @Html.EditorFor(m => m.SmsPerPagePageToDisplay)
                @Html.ValidationMessageFor(m => m.SmsPerPagePageToDisplay, "SMS' Per Page To Display is required.")
            </div>
            <div class="field-label">
                @Html.Raw("SMS Contents Trim On Grid")
            </div>
            <div class="drop-down-field">
                @Html.DropDownListFor(m => m.SmsContentsTrimOnGrid, new SelectList(
                    new[] 
                    { 
                        new { Value = "true", Text = "Yes" },
                        new { Value = "false", Text = "No" },
                    },
                    "Value",
                    "Text",
                    Model
                ), 
                new { @class = "drop-down-field" })
                @Html.ValidationMessageFor(m => m.SmsContentsTrimOnGrid, "SMS Contents Trim On Grid is required.")
            </div>
            <div class="field-label">
                @Html.Raw("SMS Contents Trim Length On Grid")
            </div>
            <div class="editor-field">
                @Html.EditorFor(m => m.SmsContentsTrimLengthOnGrid)
                @Html.ValidationMessageFor(m => m.SmsContentsTrimLengthOnGrid, "SMS Contents Trim Length On Grid is required.")
            </div>
            <div class="field-label">
                @Html.Raw("Sms Error Trim Length On Grid")
            </div>
            <div class="editor-field">
                @Html.EditorFor(m => m.SmsErrorTrimLengthOnGrid)
                @Html.ValidationMessageFor(m => m.SmsErrorTrimLengthOnGrid, "SMS Error Trim Length On Grid is required.")
            </div>
            <div class="field-label">
                @Html.Raw("Cell Phone Number Trim On Grid")
            </div>
            <div class="drop-down-field">
                @Html.DropDownListFor(m => m.CellPhoneNumberTrimOnGrid, new SelectList(
                    new[] 
                    { 
                        new { Value = "true", Text = "Yes" },
                        new { Value = "false", Text = "No" },
                    },
                    "Value",
                    "Text",
                    Model
                ), 
                new { @class = "drop-down-field" })
                @Html.ValidationMessageFor(m => m.SmsContentsTrimOnGrid, "SMS Contents Trim On Grid is required.")
            </div>
            <div class="field-label">
                @Html.Raw("Cell Phone Number Trim Length On Grid")
            </div>
            <div class="editor-field">
                @Html.EditorFor(m => m.CellPhoneNumberTrimLengthOnGrid)
                @Html.ValidationMessageFor(m => m.CellPhoneNumberTrimLengthOnGrid, "SMS Contents Trim Length On Grid is required.")
            </div>
            <div class="field-label">
                @Html.Raw("SMS Days To Display")
            </div>
            <div class="editor-field">
                @Html.EditorFor(m => m.SmsDaysToDisplay)
                @Html.ValidationMessageFor(m => m.SmsDaysToDisplay, "SMS Days To Display is required.")
            </div>
            <div class="field-label">
                @Html.Raw("Maximum Sms Date Range Days To Display")
            </div>
            <div class="editor-field">
                @Html.EditorFor(m => m.MaximumSmsDateRangeDaysToDisplay)
                @Html.ValidationMessageFor(m => m.MaximumSmsDateRangeDaysToDisplay, "SMS Days To Display is required.")
            </div>

            <br />
            <hr />
            <br />
            @*Contact Settings*@
            <div class="glogal-settings-category">
                @Html.Raw("Contact Settings")
            </div>
            <br />
            <div class="field-label">
                @Html.Raw("Figlut Phone Number")
            </div>
            <div class="editor-field">
                @Html.EditorFor(m => m.FiglutPhoneNumber)
                @Html.ValidationMessageFor(m => m.FiglutPhoneNumber, "Figlut Phone Number is required")
            </div>
            <div class="field-label">
                @Html.Raw("Figlut Support Email Address")
            </div>
            <div class="editor-field">
                @Html.EditorFor(m => m.FiglutSupportEmailAddress)
                @Html.ValidationMessageFor(m => m.FiglutSupportEmailAddress, "Figlut Support Email Address is required.")
            </div>
            <div class="field-label">
                @Html.Raw("Figlut Marketing Email Address")
            </div>
            <div class="editor-field">
                @Html.EditorFor(m => m.FiglutMarketingEmailAddress)
                @Html.ValidationMessageFor(m => m.FiglutMarketingEmailAddress, "Figlut Marketing Email Address is required.")
            </div>
            <div class="field-label">
                @Html.Raw("Figlut General Email Address")
            </div>
            <div class="editor-field">
                @Html.EditorFor(m => m.FiglutGeneralEmailAddress)
                @Html.ValidationMessageFor(m => m.FiglutGeneralEmailAddress, "Figlut General Email Address is required.")
            </div>
            <div class="field-label">
                @Html.Raw("Figlut Address")
            </div>
            <div class="editor-field">
                @Html.EditorFor(m => m.FiglutAddress)
                @Html.ValidationMessageFor(m => m.FiglutAddress, "Figlut Address is required.")
            </div>
            <div class="buttons">
                @Html.LinkButtonForSubmit("Save", "onEditGlobalSettingsSaveClick()", "btnEditGlobalSettingsSave")
                @Html.LinkButtonForCancel("Cancel", "onEditGlobalSettingsCancelClick()", "btnEditGlobalSettingsCancel")
            </div>
            <div id="EditGlobalSettingsErrorField" style="color:#8A0808"></div>
        </fieldset>
    </form>
</div>

<script type="text/javascript">

    $(document).ready(function () {
        $("#DisableScreenScalingForMobileDevices").focus();
        $(document).keypress(function (event) {
            if (event.which == 13) {
                $("#btnEditGlobalSettingsSave").click();
            }
        });
    });

    function searchKeyPress(e) {
        // look for window.event in case event isn't passed in
        e = e || window.event;
        if (e.keyCode == 13) {
            document.getElementById('btnEditGlobalSettingsSave').click();
            return false;
        }
        return true;
    }

    function onEditGlobalSettingsSaveClick() {
        $.ajax({
            url: '@Url.Action("Edit", "GlobalSetting")',
            type: 'POST',
            data: $("#EditGlobalSettingsForm").serialize(),
            success: function (data) {
                if (data.Success) {
                    var url = '@Url.Content("~/Home")'
                    window.location.href = url;
                } else {
                    $("#EditGlobalSettingsErrorField").html(data.ErrorMsg);
                }
            }
        })
    };

    function onEditGlobalSettingsCancelClick() {
        var url = '@Url.Content("~/Home")';
        window.location.href = url;
    };

</script>