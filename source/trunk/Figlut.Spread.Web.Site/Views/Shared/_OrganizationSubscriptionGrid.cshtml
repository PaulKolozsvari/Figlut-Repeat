@model Figlut.Spread.Web.Site.Models.FilterModel<OrganizationSubscriptionModel>

@using Figlut.Server.Toolkit.Data;
@using Figlut.Spread.Web.Site.Configuration;
@using Figlut.Spread.Web.Site;
@using Figlut.Spread.Web.Site.Models;
@using Figlut.Spread.Web.Site.Extensions;
@using Figlut.Spread.ORM.Helpers;

@{
    Figlut.Spread.Web.Site.Models.OrganizationSubscriptionModel organizationSubscription = new OrganizationSubscriptionModel();
}
@{
    int subscriptionsPerPageToDisplay = Convert.ToInt32(SpreadWebApp.Instance.GlobalSettings[GlobalSettingName.SubscriptionsPerPageToDisplay].SettingValue);
    var grid = new WebGrid(Model.DataModel, canPage: true, rowsPerPage: subscriptionsPerPageToDisplay, selectionFieldName: "selectedRow", ajaxUpdateContainerId: "gridContent");
    grid.Pager(WebGridPagerModes.All);
}

<div id="gridContent" class="data-grid">
    <div id="gridWrapper">
        @Html.HiddenFor(p => p.ParentId)
        @Html.HiddenFor(p => p.ParentCaption)
        <div class="centerInformation" style="float:inherit; margin-top:1%; margin-bottom:1%;">
            <div class="grid-search">
                <table style="width:99%;">
                    <tr>
                        <td style="width:60%;">
                            <div class="search-text">
                                @Html.Raw("Search Text")
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.EditorFor(m => m.SearchText)
                        </td>
                    </tr>
                </table>
            </div>
            <div class="grid-buttons">
                <div style="float: left; margin-left:2%; margin-right:2%">
                    @Html.LinkButtonForSubmit("Search", "onSearchOrganizationSubscriptionsClick()", "btnSearch", "search.png")
                    @if (string.IsNullOrEmpty(ViewBag.ErrorMessage))
                    {
                        @Html.LinkButtonForSubmit("Download", "onDownloadAllOrganizationSubscriptionsCsvFileClick()", "btnDownload", "spreadsheet.png")
                        if (grid.HasSelection && (grid.SelectedIndex < grid.Rows.Count))
                        {
                            organizationSubscription = (OrganizationSubscriptionModel)grid.Rows[grid.SelectedIndex].Value;
                            @Html.LinkButtonForSubmit("Repeats", "onViewRepeatSchedulesClick()", "btnViewRepeatSchedules", "red-calendar-icon32.png")
                        }
                    }
                </div>
                <div style="float: right; margin-left:2%; margin-right:2%">
                    @if (string.IsNullOrEmpty(ViewBag.ErrorMessage))
                    {
                        @Html.LinkButtonForSubmit("Broadcast", "onCreateSmsCampaignClick()", "btnCreateSmsCampaign", "red-mail-open-icon32.png")
                        @Html.LinkButtonForSubmit("Create", "onCreateOrganizationSubscriptionClick()", "btnCreateOrganizationSubscription", "red-document-plus-icon32.png")
                        @Html.LinkButtonForCancel("Delete All", "onDeleteAllOrganizationSubscriptionsClick()", "btnDeleteAllOrganizationSubscriptions")
                        if (grid.HasSelection && (grid.SelectedIndex < grid.Rows.Count))
                        {
                            organizationSubscription = (OrganizationSubscriptionModel)grid.Rows[grid.SelectedIndex].Value;
                            @Html.LinkButtonForCancel("Delete", "onDeleteOrganizationSubscriptionClick()", "btnDeleteOrganizationSubscription")
                            @Html.LinkButtonForSubmit("Edit", "onEditOrganizationSubscriptionClick()", "btnEditOrganizationSubscription", "red-edit.png")
                            @Html.LinkButtonForSubmit("SMS", "onSendSmsClick()", "btnSendSms", "red-mail-send-icon32.png")
                        }
                    }
                </div>
            </div>
        </div>
        <div class="organization-subscription-preview">
            @if (Model.IsAdministrator && grid.HasSelection && (grid.SelectedIndex < grid.Rows.Count))
            {
                organizationSubscription = (OrganizationSubscriptionModel)grid.Rows[grid.SelectedIndex].Value;
                <div style="float:left; margin-left:2%; margin-right:2%;">
                    <b>@Html.Raw(string.Format("ID: {0}", organizationSubscription.SubscriptionId.ToString()))</b>
                </div>
            }
            <div style="float: right; margin-left:2%; margin-right:2%">
                <b>@Html.Raw(string.Format("Subscriptions Loaded: {0} of {1}", Model.TotalCount.ToString(), Model.TotalTableCount.ToString()))</b>
            </div>
        </div>
        <div id="gridTableContainer">
            @grid.GetHtml(
                tableStyle: "webGrid",
                headerStyle: "header",
                alternatingRowStyle: "alt",
                selectedRowStyle: "select",
                columns: grid.Columns(
                grid.Column("Subscriptions", format: (item) => item.GetSelectLink("*"), style: "select-column-style"),
                grid.Column(EntityReader<OrganizationSubscriptionModel>.GetPropertyName(p => p.SubscriberCellPhoneNumber, false), "Cell Phone Number"),
                grid.Column(EntityReader<OrganizationSubscriptionModel>.GetPropertyName(p => p.SubscriberName, false), "Subscriber Name"),
                grid.Column(EntityReader<OrganizationSubscriptionModel>.GetPropertyName(p => p.CustomerFullName, false), "Customer Name"),
                grid.Column(EntityReader<OrganizationSubscriptionModel>.GetPropertyName(p => p.CustomerEmailAddress, false), "Email"),
                grid.Column(EntityReader<OrganizationSubscriptionModel>.GetPropertyName(p => p.CustomerIdentifier, false), "Identifier"),
                grid.Column(EntityReader<OrganizationSubscriptionModel>.GetPropertyName(p => p.Enabled, false), "Enabled")
            ))
        </div>
        <div class="organization-subscription-preview">
            @if (grid.HasSelection && (grid.SelectedIndex < grid.Rows.Count))
            {
                organizationSubscription = (OrganizationSubscriptionModel)grid.Rows[grid.SelectedIndex].Value;
                <div style="float: left; margin-left:2%; margin-right:2%">
                    <b>@Html.Raw(string.Format("Cell Phone: {0}", organizationSubscription.SubscriberCellPhoneNumber))</b>   
                </div>
                <div style="float:right; margin-left:2%; margin-right:2%; color: #a30e0e;">
                    @Html.Raw(string.Format("{0}", organizationSubscription.CustomerNotes))
                </div>
            }
        </div>
    </div>
    <div id="OrganizationSubscriptionsErrorField" style="color:#8A0808">
        @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
        {
            <br />
            @Html.Raw(ViewBag.ErrorMessage)
        }
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function () {
        $("#SearchText").focus();
        makeGridRowsPostForm();
        enableDatepickers();
    });

    function onSearchOrganizationSubscriptionsClick() {
        postOrganizationSubscriptions();
    }

    function onDeleteOrganizationSubscriptionClick() {
        showDialog(
            '#divConfirmationDialog',
            '#dlgConfirmation',
            'ConfirmDeleteDialog',
            'OrganizationSubscription',
            'identifier',
            '@organizationSubscription.SubscriptionId.ToString()');
    };

    function onSendSmsClick() {
        showDialog(
            '#divSendSubscriberSmsDialog',
            '#dlgSendSubscriberSmsDialog',
            'SendSms',
            'Subscriber',
            'subscriberId',
            '@organizationSubscription.SubscriberId.ToString()');
    }

    function onEditOrganizationSubscriptionClick() {
        showDialog(
            '#divEditOrganizationSubscription',
            '#dlgEditOrganizationSubscription',
            'EditDialog',
            'OrganizationSubscription',
            'subscriptionId',
            '@organizationSubscription.SubscriptionId.ToString()');
    };

    function onCreateOrganizationSubscriptionClick() {
        showDialog(
            '#divCreateOrganizationSubscription',
            '#dlgCreateOrganizationSubscription',
            'CreateDialog',
            'OrganizationSubscription',
            'organizationId',
            '@Model.ParentId');
    }

    function getSearchParametersString() {
        var searchParameters = '@string.Format("{0}|{1}|{2}|{3}",
        Model.SearchText != null ? Model.SearchText : string.Empty,
        Model.StartDate.HasValue ? Model.StartDate.Value.Date.ToString() : string.Empty,
        Model.EndDate.HasValue ? Model.EndDate.Value.Date.ToString() : string.Empty,
        Model.ParentId.ToString())'
        return searchParameters;
    }

    function onDeleteAllOrganizationSubscriptionsClick() {
        var searchParameters = getSearchParametersString();
        showDialog(
            '#divConfirmationDialog',
            '#dlgConfirmation',
            'ConfirmDeleteAllDialog',
            'OrganizationSubscription',
            'searchParametersString',
            searchParameters);
    }

    function onCreateSmsCampaignClick() {
        var searchParameters = getSearchParametersString();
        showDialog(
            '#divCreateSmsCampaign',
            '#dlgCreateSmsCampaign',
            'CreateSmsCampaignDialog',
            'OrganizationSubscription',
            'searchParametersString',
            searchParameters);
    }

    function onDownloadAllOrganizationSubscriptionsCsvFileClick() {
        var searchParameters = getSearchParametersString();
        var downloadUrl = '@Url.Action("DownloadCsvFile", "OrganizationSubscription", new { searchParametersString = "_searchValue" })';
        downloadUrl = downloadUrl.replace('_searchValue', searchParameters);
        window.location = downloadUrl;
    }

    function onViewRepeatSchedulesClick() {
        var selectedSubscriptionId = '@organizationSubscription.SubscriptionId';
        var downloadUrl = '@Url.Action("Index", "RepeatSchedule", new { subscriptionId = "_subscriptionId" })';
        downloadUrl = downloadUrl.replace('_subscriptionId', selectedSubscriptionId);
        window.location = downloadUrl;
    }

    function postOrganizationSubscriptions() {
        $('form#frmDetails').trigger('submit');
    };

</script>