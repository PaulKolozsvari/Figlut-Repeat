@model OrganizationLeadFilterModel

@using Figlut.Server.Toolkit.Data;
@using Figlut.Repeat.Web.Site.Configuration;
@using Figlut.Repeat.Web.Site.Models;
@using Figlut.Repeat.Web.Site.Extensions;
@using Figlut.Repeat.ORM.Helpers;

@{
    Figlut.Repeat.Web.Site.Models.OrganizationLeadModel organizationLead = new OrganizationLeadModel();
}
@{
    int leadsPerPageToDisplay = Convert.ToInt32(RepeatWebApp.Instance.GlobalSettings[GlobalSettingName.OrganizationLeadsPerPageToDisplay].SettingValue);
    var grid = new WebGrid(Model.DataModel, canPage: true, rowsPerPage: leadsPerPageToDisplay, selectionFieldName: "selectedRow", ajaxUpdateContainerId: "gridContent");
    grid.Pager(WebGridPagerModes.All);
}

<div id="gridContent" class="data-grid">
    <div id="gridWrapper">
        @Html.HiddenFor(p => p.ParentId)
        @Html.HiddenFor(p => p.ParentCaption)
        <div class="centerInformation" style="float:inherit; margin-top:1%; margin-bottom:1%;">
            @*<div id="MapDiv" style="width:80%;height:400px;"></div>*@
            <div class="grid-search">
                <table style="width:99%;">
                    <tr>
                        <td style="width:60%;">
                            <div class="search-text">
                                @Html.Raw("Search Text")
                            </div>
                        </td>
                        @if (ViewBag.CentreNamesList != null)
                        {
                            <td style="width:28%;">
                                @if (ViewBag.CentreNamesList != null)
                                {
                                    <div class="field-label">
                                        @Html.Raw("Area")
                                    </div>
                                }
                            </td>
                        }
                    </tr>
                    <tr>
                        <td>
                            @Html.EditorFor(m => m.SearchText)
                        </td>
                        @if (ViewBag.CentreNamesList != null)
                        {
                            <td>
                                <div class="editor-field">
                                    @Html.DropDownList("SearchCategory", ViewBag.CentreNamesList as List<SelectListItem>, new { @class = "drop-down-field" })
                                </div>
                            </td>
                        }
                    </tr>
                </table>
            </div>
            <div class="grid-buttons">
                <div style="float: left; margin-left:2%; margin-right:2%">
                    @Html.LinkButtonForSubmit("Search", "onSearchOrganizationLeadsClick()", "btnSearch", "search.png")
                    @if (string.IsNullOrEmpty(ViewBag.ErrorMessage))
                    {
                        @Html.LinkButtonForSubmit("Download", "onDownloadAllOrganizationLeadsCsvFileClick()", "btnDownload", "spreadsheet.png")
                        if (grid.HasSelection && (grid.SelectedIndex < grid.Rows.Count))
                        {
                            organizationLead = (OrganizationLeadModel)grid.Rows[grid.SelectedIndex].Value;
                        }
                    }
                </div>
                <div style="float: right; margin-left:2%; margin-right:2%">
                    @if (string.IsNullOrEmpty(ViewBag.ErrorMessage))
                    {
                        @Html.LinkButtonForSubmit("Create", "onCreateOrganizationLeadClick()", "btnCreateOrganizationLead", "red-document-plus-icon32.png")
                        @Html.LinkButtonForCancel("Delete All", "onDeleteAllOrganizationLeadsClick()", "btnDeleteAllOrganizationLeads")
                        if (grid.HasSelection && (grid.SelectedIndex < grid.Rows.Count))
                        {
                            organizationLead = (OrganizationLeadModel)grid.Rows[grid.SelectedIndex].Value;
                            @Html.LinkButtonForCancel("Delete", "onDeleteOrganizationLeadClick()", "btnDeleteOrganizationLead")
                            @Html.LinkButtonForSubmit("Edit", "onEditOrganizationLeadClick()", "btnEditOrganizationLead", "red-edit.png")
                        }
                    }
                </div>
            </div>
        </div>
        <div class="organization-lead-preview">
            @if (Model.IsAdministrator && grid.HasSelection && (grid.SelectedIndex < grid.Rows.Count))
            {
                organizationLead = (OrganizationLeadModel)grid.Rows[grid.SelectedIndex].Value;
                <div style="float:left; margin-left:2%; margin-right:2%;">
                    <b>@Html.Raw(string.Format("ID: {0}", organizationLead.OrganizationLeadId.ToString()))</b>
                </div>
            }
            <div style="float: right; margin-left:2%; margin-right:2%">
                <b>@Html.Raw(string.Format("Leads Loaded: {0} of {1}", Model.TotalCount.ToString(), Model.TotalTableCount.ToString()))</b>
            </div>
        </div>
        <div id="gridTableContainer">
            @grid.GetHtml(
                tableStyle: "webGrid",
                headerStyle: "header",
                alternatingRowStyle: "alt",
                selectedRowStyle: "select",
                columns: grid.Columns(
                grid.Column("Leads", format: (item) => item.GetSelectLink("*"), style: "select-column-style"),
                grid.Column(EntityReader<OrganizationLeadModel>.GetPropertyName(p => p.SearchLocationCentreName, false), "Area"),
                //grid.Column(EntityReader<OrganizationLeadModel>.GetPropertyName(p => p.SearchLocationRadius, false), "Centre Radius"),
                //grid.Column(EntityReader<OrganizationLeadModel>.GetPropertyName(p => p.GooglePlaceId, false), "Place ID"),
                grid.Column(EntityReader<OrganizationLeadModel>.GetPropertyName(p => p.Name, false), "Name"),
                grid.Column(EntityReader<OrganizationLeadModel>.GetPropertyName(p => p.InternationPhoneNumber, false), "Phone"),
                grid.Column(EntityReader<OrganizationLeadModel>.GetPropertyName(p => p.IsMobilePhoneNumber, false), "Mobile Number", format: (item) => @Html.Raw("<input type='checkbox' " + ((item.IsMobilePhoneNumber == true) ? "checked" : "") + " disabled='disabled' />"))
            ))
        </div>
        <div class="organization-lead-preview">
            @if (grid.HasSelection && (grid.SelectedIndex < grid.Rows.Count))
            {
                organizationLead = (OrganizationLeadModel)grid.Rows[grid.SelectedIndex].Value;
                <div style="float: left; margin-left:2%; margin-right:2%">
                    <b>@Html.Raw(string.Format("Address: {0}", organizationLead.Address))</b>
                </div>
                <div style="float:right; margin-left:2%; margin-right:2%; color: #a30e0e;">
                    @Html.Raw(string.Format("{0}", organizationLead.WebsiteUrl))
                </div>
            }
        </div>
        <div class="grid-search">
            <div id="MapDiv" style="width:100%;height:300px;"></div>
        </div>
    </div>

    <div id="OrganizationLeadsErrorField" style="color:#8A0808">
        @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
        {
            <br />
            @Html.Raw(ViewBag.ErrorMessage)
        }
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function () {
        $("#SearchText").focus();
        makeGridRowsPostForm();
        enableDatepickers();
        displayGoogleMap();
    });

    function displayGoogleMap() {
    @{
        if(Model.DataModel.Count > 0)
        {
            <text>
            var latitude = @(grid.HasSelection && (grid.SelectedIndex < grid.Rows.Count) ? organizationLead.GetLatitudeString() : Model.GetCentreLatitudeString());
            var longitude = @(grid.HasSelection && (grid.SelectedIndex < grid.Rows.Count) ? organizationLead.GetLongitudeString() : Model.GetCentreLongitudeString());
            var zoomLevel = @(grid.HasSelection && (grid.SelectedIndex < grid.Rows.Count) ? 20 : Model.ZoomLevel);
            var radius = @Model.CentreRadius;
            var zoomOnCircle = @(grid.HasSelection && (grid.SelectedIndex < grid.Rows.Count) ? 0 : 1);

            //var firstLocation = new google.maps.LatLng(lat, long);
            var mapOptions = {
                center: { lat: latitude, lng: longitude },
                zoom: zoomLevel,
                //minZoom: 15,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            //Display the Google map in the div control with the defined Options
            var map = new google.maps.Map(document.getElementById("MapDiv"), mapOptions);
            if (radius > 0) {
                var circle = new google.maps.Circle({
                    strokeColor: "#FF0000",
                    strokeOpacity: 0.9,
                    strokeWeight: 2,
                    fillColor: "#3195c2",
                    fillOpacity: 0.2,
                    map: map,
                    center: { lat: latitude, lng: longitude },
                    radius: radius
                });
                if (zoomOnCircle) {
                    map.fitBounds(circle.getBounds());
                }
            }
            </text>
            foreach(OrganizationLeadModel geolocationModel in Model.DataModel)
            {
                if(!geolocationModel.Latitude.HasValue || !geolocationModel.Longitude.HasValue)
                {
                    continue;
                }
                <text>
                    //Set the Latitude and Longitude of the Map
                    var location = new google.maps.LatLng(@geolocationModel.GetLatitudeString(), @geolocationModel.GetLongitudeString());
                    //Set Marker on the Map
                    var marker = new google.maps.Marker({
                        position: location,
                        //animation: google.maps.Animation.BOUNCE,
                    });
                    var markerUrl = '';
                    @{
                        if(geolocationModel.IsMobilePhoneNumber)
                        {
                            <text>markerUrl = 'http://maps.google.com/mapfiles/ms/icons/red-dot.png'</text>
                        }
                        else
                        {
                            <text>markerUrl = 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'</text>
                        }
                    }
                    marker.setIcon(markerUrl);
                    var infowindow = new google.maps.InfoWindow();
                    google.maps.event.addListener(marker, "click", function () {
                        infowindow.setContent(
                            "<div><strong>" +
                            '@(geolocationModel.Name)' +
                            "</strong><br>" +
                            'Address: @(geolocationModel.Address)' +
                            "<br>" +
                            'Phone Number: @(geolocationModel.InternationPhoneNumber)' +
                            "<br>" +
                            'Website @(geolocationModel.WebsiteUrl)' +
                            "<br>" +
                            'Status: @(geolocationModel.BusinessStatus)' +
                            "<br>" +
                            'Latitude: @(geolocationModel.Latitude)' +
                            "<br>" +
                            'Longitude: @(geolocationModel.Longitude)' +
                            "</div>"
                        );
                        infowindow.open(map, this);
                    });
                    marker.setMap(map);
                </text>
            }
        }
    }
}



    function onSearchOrganizationLeadsClick() {
        postOrganizationLeads();
    }

    function onDeleteOrganizationLeadClick() {
        showDialog(
            '#divConfirmationDialog',
            '#dlgConfirmation',
            'ConfirmDeleteDialog',
            'OrganizationLead',
            'identifier',
            '@organizationLead.OrganizationLeadId.ToString()');
    };

    function onEditOrganizationLeadClick() {
        showDialog(
            '#divEditOrganizationLead',
            '#dlgEditOrganizationLead',
            'EditDialog',
            'OrganizationLead',
            'organizationLeadId',
            '@organizationLead.OrganizationLeadId.ToString()');
    };

    function onCreateOrganizationLeadClick() {
        showDialog(
            '#divCreateOrganizationLead',
            '#dlgCreateOrganizationLead',
            'CreateDialog',
            'OrganizationLead',
            'organizationId',
            '@Model.ParentId');
    }

    function getSearchParametersString() {
        var searchParameters = '@string.Format("{0}|{1}|{2}|{3}|{4}",
        Model.SearchText != null ? Model.SearchText : string.Empty,
        Model.StartDate.HasValue ? Model.StartDate.Value.Date.ToString() : string.Empty,
        Model.EndDate.HasValue ? Model.EndDate.Value.Date.ToString() : string.Empty,
        Model.ParentId.ToString(),
        Model.SearchCategory.ToString())'
        return searchParameters;
    }

    function onDeleteAllOrganizationLeadsClick() {
        var searchParameters = getSearchParametersString();
        showDialog(
            '#divConfirmationDialog',
            '#dlgConfirmation',
            'ConfirmDeleteAllDialog',
            'OrganizationLead',
            'searchParametersString',
            searchParameters);
    }

    function onDownloadAllOrganizationLeadsCsvFileClick() {
        var searchParameters = getSearchParametersString();
        var downloadUrl = '@Url.Action("DownloadCsvFile", "OrganizationLead", new { searchParametersString = "_searchValue" })';
        downloadUrl = downloadUrl.replace('_searchValue', searchParameters);
        window.location = downloadUrl;
    }

    function postOrganizationLeads() {
        $('form#frmDetails').trigger('submit');
    };

</script>