@model Figlut.Repeat.Web.Site.Models.ScheduleEntryModel

<div id="dlgEditScheduleEntry">
    <img src="~/Images/Icons/red-edit32.png" style="float:right; margin-right:1%; margin-left:1%" />
    <div class="centerForm">
        <form id="EditScheduleEntryForm">
            @Html.ValidationSummary(true, "Failed to edit.")
            <fieldset>
                <legend>Confirmation Form</legend>
                @Html.HiddenFor(m => m.ScheduleEntryId)
                @Html.HiddenFor(m => m.ScheduleId)
                @Html.HiddenFor(m => m.EntryDateFormatted)
                @Html.HiddenFor(m => m.EntryDateDayOfWeek)
                @Html.HiddenFor(m => m.NotificationDateCreate)
                @Html.HiddenFor(m => m.NotificationDateFormatted)
                @Html.HiddenFor(m => m.NotificationDateDayOfWeek)
                @Html.HiddenFor(m => m.SMSMessageId)
                @Html.HiddenFor(m => m.DateCreated)
                @Html.HiddenFor(m => m.SubscriptionId)
                @Html.HiddenFor(m => m.ScheduleName)
                @Html.HiddenFor(m => m.Quantity)
                @Html.HiddenFor(m => m.UnitOfMeasure)
                @Html.HiddenFor(m => m.DaysRepeatInterval)
                @Html.HiddenFor(m => m.NotificationDateFormatted)
                @Html.HiddenFor(m => m.ScheduleNotes)
                @Html.HiddenFor(m => m.ScheduleDateCreated)

                <div class="field-label">
                    @Html.Raw("Notification Message")
                </div>
                <div class="editor-field">
                    @Html.EditorFor(m => m.NotificationMessage)
                    @Html.ValidationMessageFor(m => m.NotificationMessage)
                </div>
                <div class="field-label">
                    @Html.Raw("Entry Date")
                </div>
                <div class="editor-field">
                    @Html.EditorFor(m => m.EntryDate, new { disabled = "disabled", @readonly = "readonly" })
                    @Html.ValidationMessageFor(m => m.EntryDate)
                </div>
                <div class="field-label">
                    @Html.Raw("Notification Date")
                </div>
                <div class="editor-field">
                    @Html.EditorFor(m => m.NotificationDate, new { disabled = "disabled", @readonly = "readonly" })
                    @Html.ValidationMessageFor(m => m.NotificationDate)
                </div>
                <div class="field-label">
                    @Html.Raw("Entry Time")
                </div>
                <div class="editor-field">
                    @Html.EditorFor(m => m.EntryTime, new { disabled = "disabled", @readonly = "readonly" })
                    @Html.ValidationMessageFor(m => m.EntryTime)
                </div>
                <div class="field-label">
                    @Html.Raw("SMS Notification Sent")
                </div>
                <div class="editor-field">
                    @Html.DropDownListFor(m => m.SMSNotificationSent, new SelectList(
                        new[]
                        {
                            new { Value = "true", Text = "Yes" },
                            new { Value = "false", Text = "No" },
                        },
                        "Value",
                        "Text",
                        Model
                    ),
                    new { @class = "drop-down-field" })
                    @Html.ValidationMessageFor(m => m.SMSNotificationSent, "SMSNotificationSent is required.")
                </div>
                <div class="field-label">
                    @Html.Raw("Failed To Send")
                </div>
                <div class="editor-field">
                    @Html.DropDownListFor(m => m.FailedToSend, new SelectList(
                        new[]
                        {
                            new { Value = "true", Text = "Yes" },
                            new { Value = "false", Text = "No" },
                        },
                        "Value",
                        "Text",
                        Model
                    ),
                    new { @class = "drop-down-field" })
                    @Html.ValidationMessageFor(m => m.FailedToSend, "SMSNotificationSent is required.")
                </div>
                <div class="field-label">
                    @Html.Raw("Failed To Send Error Message")
                </div>
                <div class="editor-field">
                    @*@Html.TextBoxFor(m => m.FailedToSendErrorMessage, new { disabled = "disabled", @readonly = "readonly" })*@
                    @Html.EditorFor(m => m.FailedToSendErrorMessage)
                    @Html.ValidationMessageFor(m => m.FailedToSendErrorMessage)
                </div>

                <br />
                <br />
                <div id="EditScheduleEntryErrorField" style="color:#8A0808"></div>
            </fieldset>
        </form>
    </div>
</div>

<script type="text/javascript">
    $(function () {
        var dialogName = '#dlgEditScheduleEntry';
        createDialog(dialogName, 'Edit Schedule Entry', onConfirmOK, onConfirmOpen, onConfirmCancel, 450, 450);
        enableDatepickers();
    });

    function onConfirmOK() {
        var dialogName = '#dlgEditScheduleEntry';
        var postBackUrl = '@Url.Action("EditDialog", "ScheduleEntry")';
        $.ajax({
            url: postBackUrl,
            type: 'POST',
            data: $("#EditScheduleEntryForm").serialize(),
            success: function (data) {
                if (data.Success) {
                    $(dialogName).dialog("close");
                    //Submit the form which will refresh grid to show the change the enabled/disabled.
                    var form = $('#frmDetails');
                    form.submit()
                } else {
                    $("#EditScheduleEntryErrorField").html(data.ErrorMsg);
                }
            }
        })
    };

    function onConfirmOpen() {

    }

    function onConfirmCancel() {
        //$('#confirmation-message').val('');
        $("#EditScheduleEntryErrorField").html('');
    }
</script>